diff --git a/node_modules/@callstack/repack/callstack-repack.podspec b/node_modules/@callstack/repack/callstack-repack.podspec
index b174cf9..c138b56 100644
--- a/node_modules/@callstack/repack/callstack-repack.podspec
+++ b/node_modules/@callstack/repack/callstack-repack.podspec
@@ -16,10 +16,7 @@ Pod::Spec.new do |s|
   s.source_files         = "ios/**/*.{h,m,mm,swift}"
   s.static_framework     = true
 
-  s.pod_target_xcconfig = { "DEFINES_MODULE" => "YES" }
-
-  s.dependency 'JWTDecode', '~> 3.0.0'
-  s.dependency 'SwiftyRSA', '~> 1.7'
+  s.pod_target_xcconfig = { "DEFINES_MODULE" => "YES", 'BUILD_LIBRARY_FOR_DISTRIBUTION' => 'YES' }
 
   # Use install_modules_dependencies helper to install the dependencies if React Native version >=0.71.0.
   # See https://github.com/facebook/react-native/blob/febf6b7f33fdb4904669f99d795eba4c0f95d7bf/scripts/cocoapods/new_architecture.rb#L79.
diff --git a/node_modules/@callstack/repack/ios/CodeSigningUtils.swift b/node_modules/@callstack/repack/ios/CodeSigningUtils.swift
index ef36f6f..a1d4df8 100644
--- a/node_modules/@callstack/repack/ios/CodeSigningUtils.swift
+++ b/node_modules/@callstack/repack/ios/CodeSigningUtils.swift
@@ -1,58 +1,88 @@
 import Foundation
 import CommonCrypto
-import JWTDecode
-import SwiftyRSA
+import Security
 
 @objc(CodeSigningUtils)
 public class CodeSigningUtils: NSObject {
 
+    enum CodeSigningError: Error {
+        case tokenNotFound
+        case publicKeyNotFound
+        case tokenInvalid
+        case tokenDecodingFailed
+        case tokenVerificationFailed
+        case publicKeyInvalid
+        case bundleVerificationFailed
+    }
+
     private static func getPublicKey() -> String? {
-        // obtain public key embedded into the bundle from infoPlist under a key RepackPublicKey
-        let bundle = Bundle.main
-        let publicKey = bundle.object(forInfoDictionaryKey: "RepackPublicKey") as? String
-        return publicKey
+        return Bundle.main.object(forInfoDictionaryKey: "RepackPublicKey") as? String
     }
 
-    private static func convertBase64URLtoBase64(_ base64URL: String) -> String {
-        // replace the characters -_ with main format equivalents
-        var base64 = base64URL
+    private static func base64URLToData(_ base64url: String) -> Data? {
+        var base64 = base64url
             .replacingOccurrences(of: "-", with: "+")
             .replacingOccurrences(of: "_", with: "/")
 
-        // pad the base64 string with "=" so it's divisible by 4
-        if base64.count % 4 != 0 {
-            base64.append(String(repeating: "=", count: 4 - base64.count % 4))
+        while base64.count % 4 != 0 {
+            base64.append("=")
         }
 
-        return base64
+        return Data(base64Encoded: base64)
     }
 
-    private static func decodeAndVerifyToken(token: String, publicKey: String) throws -> JWTDecode.JWT {
-        guard let jwt = try? JWTDecode.decode(jwt: token) else {
+    private static func decodeJWTPayload(token: String) throws -> [String: Any] {
+        let parts = token.split(separator: ".")
+        guard parts.count == 3 else {
+            throw CodeSigningError.tokenInvalid
+        }
+
+        guard let payloadData = base64URLToData(String(parts[1])),
+              let json = try? JSONSerialization.jsonObject(with: payloadData),
+              let dict = json as? [String: Any] else {
             throw CodeSigningError.tokenDecodingFailed
         }
 
-        // we have to convert the signature from base64URL standard to main format
-        guard let jwtSignature = jwt.signature else {
-            throw CodeSigningError.tokenInvalid
+        return dict
+    }
+
+    private static func verifyRSASignature(publicKeyPEM: String, signedData: Data, signature: Data) throws {
+        let keyString = publicKeyPEM
+            .replacingOccurrences(of: "-----BEGIN PUBLIC KEY-----", with: "")
+            .replacingOccurrences(of: "-----END PUBLIC KEY-----", with: "")
+            .replacingOccurrences(of: "\n", with: "")
+            .replacingOccurrences(of: "\r", with: "")
+
+        guard let keyData = Data(base64Encoded: keyString) else {
+            throw CodeSigningError.publicKeyInvalid
         }
 
-        let signatureB64 = convertBase64URLtoBase64(jwtSignature)
-        let signature = Signature(data: Data(base64Encoded: signatureB64)!)
+        let attributes: [String: Any] = [
+            kSecAttrKeyType as String: kSecAttrKeyTypeRSA,
+            kSecAttrKeyClass as String: kSecAttrKeyClassPublic,
+            kSecAttrKeySizeInBits as String: 2048
+        ]
 
-        guard let pk = try? PublicKey(pemEncoded: publicKey) else {
+        guard let secKey = SecKeyCreateWithData(keyData as CFData, attributes as CFDictionary, nil) else {
             throw CodeSigningError.publicKeyInvalid
         }
 
-        // use b64-encoded header and payload for signature verification
-        let tokenWithoutSignature = token.components(separatedBy: ".").dropLast().joined(separator: ".")
-        let clearMessage = try? ClearMessage(string: tokenWithoutSignature, using: .utf8)
+        let algorithm: SecKeyAlgorithm = .rsaSignatureMessagePKCS1v15SHA256
 
-        let isSuccesfullyVerified = try? clearMessage?.verify(with: pk, signature: signature, digestType: .sha256)
+        guard SecKeyIsAlgorithmSupported(secKey, .verify, algorithm) else {
+            throw CodeSigningError.tokenVerificationFailed
+        }
 
-        if isSuccesfullyVerified! {
-            return jwt
-        } else {
+        var error: Unmanaged<CFError>?
+        let isValid = SecKeyVerifySignature(
+            secKey,
+            algorithm,
+            signedData as CFData,
+            signature as CFData,
+            &error
+        )
+
+        if !isValid {
             throw CodeSigningError.tokenVerificationFailed
         }
     }
@@ -60,23 +90,13 @@ public class CodeSigningUtils: NSObject {
     private static func computeHash(fileContent content: NSData?) -> String? {
         guard let content = content else { return nil }
 
-        let hash = getHash(content)
-        let hexHash = convertToHex(hash)
-        
-        return hexHash
-    }
-    
-    private static func getHash(_ content: NSData) -> Data {
         let data = Data(referencing: content)
         var hash = [UInt8](repeating: 0, count: Int(CC_SHA256_DIGEST_LENGTH))
         data.withUnsafeBytes {
             _ = CC_SHA256($0.baseAddress, CC_LONG(data.count), &hash)
         }
-        return Data(hash)
-    }
 
-    private static func convertToHex(_ data: Data) -> String {
-        return data.reduce("") { $0 + String(format: "%02x", $1) }
+        return hash.map { String(format: "%02x", $0) }.joined()
     }
 
     @objc
@@ -89,24 +109,32 @@ public class CodeSigningUtils: NSObject {
             throw CodeSigningError.publicKeyNotFound
         }
 
-        let jwt = try decodeAndVerifyToken(token: token, publicKey: publicKey)
-        guard let contentHash = jwt["hash"].string else {
+        let parts = token.components(separatedBy: ".")
+        guard parts.count == 3 else {
             throw CodeSigningError.tokenInvalid
         }
 
-        let fileHash = computeHash(fileContent: fileContent)
+        let signedString = parts[0] + "." + parts[1]
+        guard let signedData = signedString.data(using: .utf8),
+              let signature = base64URLToData(parts[2]) else {
+            throw CodeSigningError.tokenInvalid
+        }
 
-        if contentHash != fileHash {
+        try verifyRSASignature(publicKeyPEM: publicKey, signedData: signedData, signature: signature)
+
+        let payload = try decodeJWTPayload(token: token)
+        guard let expectedHash = payload["hash"] as? String else {
+            throw CodeSigningError.tokenInvalid
+        }
+
+        guard let actualHash = computeHash(fileContent: fileContent), expectedHash == actualHash else {
             throw CodeSigningError.bundleVerificationFailed
         }
     }
 
     @objc
     public static func extractBundleAndToken(fileContent: NSData?) -> [String: Any] {
-        // in signed bundles, last 1280 bytes are reserved for the token
         let signatureSize = 1280
-        // used to denote beginning of the code-signing section of the bundle
-        // alias for "Repack Code-Signing Signature Begin"
         let startingSequence = "/* RCSSB */"
 
         guard let data = fileContent else {
@@ -115,16 +143,14 @@ public class CodeSigningUtils: NSObject {
 
         let fullData = Data(referencing: data)
 
-        // if bundle is smaller than 1280 bytes, treat it as unsigned
         if fullData.count < signatureSize {
             return ["bundle": data, "token": NSNull()]
         }
 
-        // extract the last 1280 bytes from the ByteArray
         let lastBytes = fullData.suffix(signatureSize)
 
-        if let signatureString = String(data: lastBytes, encoding: .utf8), signatureString.hasPrefix(startingSequence) {
-            // bundle is signed
+        if let signatureString = String(data: lastBytes, encoding: .utf8),
+           signatureString.hasPrefix(startingSequence) {
             let bundle = fullData.prefix(fullData.count - signatureSize)
             let token = signatureString
                 .replacingOccurrences(of: startingSequence, with: "")
@@ -132,10 +158,7 @@ public class CodeSigningUtils: NSObject {
                 .trimmingCharacters(in: .whitespaces)
             return ["bundle": NSData(data: bundle), "token": token]
         } else {
-            // bundle is not signed, so consider all bytes as bundle
             return ["bundle": data, "token": NSNull()]
         }
     }
 }
-
-
